namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0> struct result<This(Func, A0)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0> typename result<call(Func, A0)>::type operator()(Func const& f, A0 const& a0) { typedef typename result<call(Func, A0)>::type ntype; typedef typename result<call(Func, A0)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1> struct result<This(Func, A0 , A1)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1> typename result<call(Func, A0 , A1)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1) { typedef typename result<call(Func, A0 , A1)>::type ntype; typedef typename result<call(Func, A0 , A1)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2> struct result<This(Func, A0 , A1 , A2)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2> typename result<call(Func, A0 , A1 , A2)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2) { typedef typename result<call(Func, A0 , A1 , A2)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3> struct result<This(Func, A0 , A1 , A2 , A3)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3> typename result<call(Func, A0 , A1 , A2 , A3)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3) { typedef typename result<call(Func, A0 , A1 , A2 , A3)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4> struct result<This(Func, A0 , A1 , A2 , A3 , A4)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4> typename result<call(Func, A0 , A1 , A2 , A3 , A4)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type , typename meta::scalar_of<A45>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44 , A45 const& a45) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i] , a45[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type , typename meta::scalar_of<A45>::type , typename meta::scalar_of<A46>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44 , A45 const& a45 , A46 const& a46) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i] , a45[i] , a46[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type , typename meta::scalar_of<A45>::type , typename meta::scalar_of<A46>::type , typename meta::scalar_of<A47>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44 , A45 const& a45 , A46 const& a46 , A47 const& a47) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i] , a45[i] , a46[i] , a47[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47 , class A48> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type , typename meta::scalar_of<A45>::type , typename meta::scalar_of<A46>::type , typename meta::scalar_of<A47>::type , typename meta::scalar_of<A48>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47 , class A48> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44 , A45 const& a45 , A46 const& a46 , A47 const& a47 , A48 const& a48) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i] , a45[i] , a46[i] , a47[i] , a48[i])); return load<ntype>(&tmp[0], 0); } }; } } namespace nt2 { namespace meta { template<class Func , class A0 , class X> nt2::ext:: call< tag::map_(typename nt2::meta::unspecified_<Func>::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type , typename nt2::meta::simd_< unspecified_<A0>, X >::type) , tag::cpu_ > dispatching( tag::map_ const&, tag::cpu_ const& , nt2::meta::unspecified_<Func> const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , nt2::meta::simd_< unspecified_<A0>, X > const& , adl_helper = adl_helper() ); } } namespace nt2 { namespace ext { template<class X, class Dummy> struct call<tag::map_( tag::unspecified_ , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> , tag::simd_<tag::unspecified_, X> ) , tag::cpu_, Dummy > : callable { template<class Sig> struct result; template<class This,class Func,class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47 , class A48 , class A49> struct result<This(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48 , A49)> { typedef typename meta:: result_of< typename meta:: strip<Func>::type const( typename meta::scalar_of<A0>::type , typename meta::scalar_of<A1>::type , typename meta::scalar_of<A2>::type , typename meta::scalar_of<A3>::type , typename meta::scalar_of<A4>::type , typename meta::scalar_of<A5>::type , typename meta::scalar_of<A6>::type , typename meta::scalar_of<A7>::type , typename meta::scalar_of<A8>::type , typename meta::scalar_of<A9>::type , typename meta::scalar_of<A10>::type , typename meta::scalar_of<A11>::type , typename meta::scalar_of<A12>::type , typename meta::scalar_of<A13>::type , typename meta::scalar_of<A14>::type , typename meta::scalar_of<A15>::type , typename meta::scalar_of<A16>::type , typename meta::scalar_of<A17>::type , typename meta::scalar_of<A18>::type , typename meta::scalar_of<A19>::type , typename meta::scalar_of<A20>::type , typename meta::scalar_of<A21>::type , typename meta::scalar_of<A22>::type , typename meta::scalar_of<A23>::type , typename meta::scalar_of<A24>::type , typename meta::scalar_of<A25>::type , typename meta::scalar_of<A26>::type , typename meta::scalar_of<A27>::type , typename meta::scalar_of<A28>::type , typename meta::scalar_of<A29>::type , typename meta::scalar_of<A30>::type , typename meta::scalar_of<A31>::type , typename meta::scalar_of<A32>::type , typename meta::scalar_of<A33>::type , typename meta::scalar_of<A34>::type , typename meta::scalar_of<A35>::type , typename meta::scalar_of<A36>::type , typename meta::scalar_of<A37>::type , typename meta::scalar_of<A38>::type , typename meta::scalar_of<A39>::type , typename meta::scalar_of<A40>::type , typename meta::scalar_of<A41>::type , typename meta::scalar_of<A42>::type , typename meta::scalar_of<A43>::type , typename meta::scalar_of<A44>::type , typename meta::scalar_of<A45>::type , typename meta::scalar_of<A46>::type , typename meta::scalar_of<A47>::type , typename meta::scalar_of<A48>::type , typename meta::scalar_of<A49>::type ) >::type rtype; typedef typename details:: as_native< Func , rtype , typename meta::scalar_of<A0>::type >::type stype; typedef simd::native<stype, X> type; }; template<class Func, class A0 , class A1 , class A2 , class A3 , class A4 , class A5 , class A6 , class A7 , class A8 , class A9 , class A10 , class A11 , class A12 , class A13 , class A14 , class A15 , class A16 , class A17 , class A18 , class A19 , class A20 , class A21 , class A22 , class A23 , class A24 , class A25 , class A26 , class A27 , class A28 , class A29 , class A30 , class A31 , class A32 , class A33 , class A34 , class A35 , class A36 , class A37 , class A38 , class A39 , class A40 , class A41 , class A42 , class A43 , class A44 , class A45 , class A46 , class A47 , class A48 , class A49> typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48 , A49)>::type operator()(Func const& f, A0 const& a0 , A1 const& a1 , A2 const& a2 , A3 const& a3 , A4 const& a4 , A5 const& a5 , A6 const& a6 , A7 const& a7 , A8 const& a8 , A9 const& a9 , A10 const& a10 , A11 const& a11 , A12 const& a12 , A13 const& a13 , A14 const& a14 , A15 const& a15 , A16 const& a16 , A17 const& a17 , A18 const& a18 , A19 const& a19 , A20 const& a20 , A21 const& a21 , A22 const& a22 , A23 const& a23 , A24 const& a24 , A25 const& a25 , A26 const& a26 , A27 const& a27 , A28 const& a28 , A29 const& a29 , A30 const& a30 , A31 const& a31 , A32 const& a32 , A33 const& a33 , A34 const& a34 , A35 const& a35 , A36 const& a36 , A37 const& a37 , A38 const& a38 , A39 const& a39 , A40 const& a40 , A41 const& a41 , A42 const& a42 , A43 const& a43 , A44 const& a44 , A45 const& a45 , A46 const& a46 , A47 const& a47 , A48 const& a48 , A49 const& a49) { typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48 , A49)>::type ntype; typedef typename result<call(Func, A0 , A1 , A2 , A3 , A4 , A5 , A6 , A7 , A8 , A9 , A10 , A11 , A12 , A13 , A14 , A15 , A16 , A17 , A18 , A19 , A20 , A21 , A22 , A23 , A24 , A25 , A26 , A27 , A28 , A29 , A30 , A31 , A32 , A33 , A34 , A35 , A36 , A37 , A38 , A39 , A40 , A41 , A42 , A43 , A44 , A45 , A46 , A47 , A48 , A49)>::stype stype; stype NT2_ALIGN_ON(16) tmp[meta::cardinal_of<A0>::value]; for(int i = 0; i != meta::cardinal_of<A0>::value; ++i) tmp[i] = details::maybe_genmask<stype>(f(a0[i] , a1[i] , a2[i] , a3[i] , a4[i] , a5[i] , a6[i] , a7[i] , a8[i] , a9[i] , a10[i] , a11[i] , a12[i] , a13[i] , a14[i] , a15[i] , a16[i] , a17[i] , a18[i] , a19[i] , a20[i] , a21[i] , a22[i] , a23[i] , a24[i] , a25[i] , a26[i] , a27[i] , a28[i] , a29[i] , a30[i] , a31[i] , a32[i] , a33[i] , a34[i] , a35[i] , a36[i] , a37[i] , a38[i] , a39[i] , a40[i] , a41[i] , a42[i] , a43[i] , a44[i] , a45[i] , a46[i] , a47[i] , a48[i] , a49[i])); return load<ntype>(&tmp[0], 0); } }; } }
