#include <nt2/core/numeric/function/tofloat.hpp>

namespace nt2 { namespace functors
{
  template<class Category,class Dummy>
  struct validate<$self.name$_,simd_<Category>,Dummy>
  {
    template<class Sig> struct result;
    template<class This,class A0>
    struct result<This(A0)> : meta::is_floating_point_convertible<A0>{}; 
  };
  template<class Category,class Dummy>
  struct call<$self.name$_,simd_<Category>,Dummy>
  {
    template<class Sig> struct result;
    template<class This,class A0>
    struct result<This(A0)> : 
      boost::result_of<meta::floating(A0)>{};

    NT2_FUNCTOR_CALL_DISPATCH(
      $self.arity$,
      typename nt2::meta::scalar_of<A0>::type,
      (2, (real_,arithmetic_))
    )
    NT2_FUNCTOR_CALL_EVAL_IF($self.arity$,real_)
    {
      return ???;
    }
    NT2_FUNCTOR_CALL_EVAL_IF($self.arity$,arithmetic_)
    {
      typedef typename NT2_CALL_RETURN_TYPE($self.arity$)::type type;
      return $self.name$(tofloat(a0));
    }

  };
} }
