#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

"""Put Doxygen templates in functor files
   """

import sys
import os
import re
import argparse

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_oxygenation"))
from oxygenation       import Nt2_oxygenation
sys.path.pop(0)
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'..',"utils"))
from write_utils                     import Write_file
sys.path.pop(0)
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_generation"))
from unit_base_gen                   import Base_gen
sys.path.pop(0)

def listify(data) :
    if data is None : return data
    data = re.sub('\s|"|\[|\]','',data)
    data = re.sub("'",'',data)
    return data.split(',')

def oxygenate(module,
              fcts=None,
              show=True,
              write_files=False,
              check_on_write=False,
              backup_on_write=True,
              verbose=False) :
    wr = Write_file(show,
                    write_files,
                    check_on_write,
                    backup_on_write,
                    verbose
                    )     
    if fcts is None :
        fcts = self.get_fcts_list()
    elif isinstance(fcts,str ) :
        fcts = [fcts]
    for mdl in modules :
        for fct in fcts :
            bg = Base_gen(mdl,fct,'scalar')
            nox = Nt2_oxygenation(bg)
            text = nox.doxyfy()
            new_txt = nox.doxyfy()
            wr.write(nox.path(),fct+'.hpp',new_txt)
#
if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description="list modules files names and locations")

    parser.add_argument("-m", "--modules",
                      dest="modules",
                      default=None,
                      help="""treat functors in modules which are in the provides list
                      """)
    parser.add_argument("-f", "--functors",
                      dest="functors",
                      default=None,
                      help="""treat functors in modules which are in names
                      """)
    parser.add_argument("-s", "--show",
                      dest="show",
                      action="store_true",
                      default = True,
                      help="""shows the generated text files results on standard output
                      This is the default.
                      """)
    parser.add_argument("-ns", "--no_show",
                      dest="show",
                      action="store_false",
                      default = True,
                      help="""if present, does not show the generated text
                      files results on standard output
                      This is not the default.
                      """)
    parser.add_argument("-b", "--backup_on_write",
                      dest="backup_on_write",
                      action="store_true",
                      default = True,
                      help="""backup existing files if they does exist, before replacing if -w is on.
                      if foo.cpp exist, foo.cpp is copied to foo.cpp.<i>.bak, then the new foo.cpp is written,
                      possibly overwriting the old one.
                      <i> is the first integer string for which the file foo.cpp.<i>.bak does not exist.
                      This is the default. (Use kill_unit_backup or restore_unit_from_backup to clean backups
                      or retrieving backed tests)
                      """)
    parser.add_argument("-nb", "--no_backup_on_write",
                      dest="backup_on_write",
                      action="store_false",
                      default = True,
                      help="""if present, doesn't backup existing tests files.
                      
                      This is not the default
                      """)
    parser.add_argument("-w", "--write",
                      dest="write",
                      action="store_true",
                      default = False,
                      help="""if present, effectively write the files to disk, possibly overwriting existing files
                      WITHOUT THIS OPTIONS NO FILE IS WRITTEN TO DISK
                      This is not the default.
                      """)
    parser.add_argument("-nw", "--no_write",
                      dest="write",
                      action="store_false",
                      default = False,
                      help="""does not write the files to disk (this option overcomes -b and -c)
                      This is the default.
                      """)
    namespace = parser.parse_args( "-m=boost.simd.operator -f=minus -w".split())
##    namespace = parser.parse_args( "-m=exponential -f=exp".split())
##    namespace = parser.parse_args()

    modules        = listify(namespace.modules)
    show           =         namespace.show
    backup_on_write=         namespace.backup_on_write
    write          =         namespace.write
    if modules is None :
        "Please enter at least a module name"
        raise SystemExit
    functors       = namespace.functors 
    
    for module in modules :
        oxygenate(module,functors,show=show,backup_on_write=backup_on_write,write_files=write)
