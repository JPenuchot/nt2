#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

"""Allow to create  cpp unit test files for module functors
   from the data contained in py dictionnary files
   related to the functor
   """

import sys
import os
import re
import argparse

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
from nt2_tb_props        import Nt2_tb_props
sys.path.pop(0)

sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_generation"))
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from unit_creation     import Create_tests
from files_utils       import exist
sys.path.pop(0)
sys.path.pop(0)

def listify(data) :
    if data is None : return data
    data = re.sub('\s|"|\[|\]','',data)
    data = re.sub("'",'',data)
    return data.split(',')



def shownames(md_names) :
    for r in md_names :
        tbp = Nt2_tb_props(r)
        print("for module %s"%r)
        print("functors are:")
        for n in tbp.get_fcts_list():
            print("    %s"%n)

if __name__ == "__main__" :
    parser = argparse.ArgumentParser(description="list modules functors names")
    parser.add_argument("md_name",
                      help="""module name(s) as a comma separated list
                      examples: list_modules_functors arithmetic
                                list_modules_functors boost.simd.ieee
                                list_modules_functors boost.simd.ieee,arithmetic
                      """)

##    namespace = parser.parse_args( "arithmetic".split())
    namespace = parser.parse_args()
    md_name      = listify(namespace.md_name)
    shownames(md_name)
