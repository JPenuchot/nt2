#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
from __future__ import print_function

"""count nt2 lines of code
"""

__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

import sys
import os
import re
import shutil
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from nt2_tb_props           import Nt2_tb_props
from files_utils            import read, exist
sys.path.pop(0)
sys.path.pop(0)
import argparse

def Walk( root, recurse=0, pattern='*', return_folders=0 ):
	import fnmatch, os, string
	
	# initialize
	result = []

	# must have at least root folder
	try:
		names = os.listdir(root)
	except os.error:
		return result

	# expand pattern
	pattern = pattern or '*'
	pat_list = string.splitfields( pattern , ';' )
	# check each file
	for name in names:
		fullname = os.path.normpath(os.path.join(root, name))
		# grab if it matches our pattern and entry type
		for pat in pat_list:
			if fnmatch.fnmatch(name, pat) :
				if os.path.isfile(fullname) or (return_folders and os.path.isdir(fullname)):
					result.append(fullname)
				continue
				
		# recursively scan other folders, appending results
		if recurse:
			if os.path.isdir(fullname) and not os.path.islink(fullname):
				result = result + Walk( fullname, recurse, pattern, return_folders )
			
	return result

def filters(filter) :
    Filters = {
        'c++' : '*.hpp;*.cpp;', 
        'c'   : '*.h,*.c',
        'c,c++' :'*.hpp;*.cpp;*.h,*.c*.hh,*.cc',
        'doc'   :'*.rst'
        }
    if filter.lower() in Filters.keys() :
        return (Filters[filter],filter.lower())
    else :
        return (filter,filter)
    
def is_excluded(f, exclude) :
    if exclude is None : return False
    if type(exclude) is str :
        if re.search(exclude,f) :
            return True
        else :
            return False
    else :
        exclude = ';'.split(exclude)
        for ex in exclude :
            if re.search(ex,f) : return True
        return False

def is_included(f, include) :
    if include is None : return True
    if type(include) is str :
        if re.search(include,f) :
            return True
        else :
            return False
    else :
        include = ';'.split(include)
        for inc in include :
            if re.search(inc,f) : return True
        return False
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser("count lines in nt2 code")
    parser.add_argument("-p", "--path",
                      dest="path",
                      default = os.path.join(Nt2_tb_props.get_nt2_dir(),"nt2"),
                      help="""root path for computations
                              can be absolute or relative to nt2 location
                              (default to nt2 location)
                      """)
    parser.add_argument("-f", "--filter",
                      dest="filter",
                      default =  '*.hpp;*.cpp;',
                      help="""filter can be 'c', 'c++', 'c,c++'
                      or any filtering string style: '*.h;*.cpp'
                      of filter semi_column separated  options  
                      """)
    parser.add_argument("-e", "--exclude",
                      dest="exclude",
                      default = None,
                      help="""exclude is a semi colon separated string of
                      regexp that are not to be found in the path to the file
                      """)
    parser.add_argument("-i", "--includeonly",
                      dest="include",
                      default = None,
                      help="""includeonly is a semi colon separated string of
                      regexp that are to be found in the path to the file
                      """)
    
    namespace = parser.parse_args()
    path = namespace.path
    exclude = namespace.exclude
    include = namespace.include
    filter = namespace.filter
    filter, msg = filters(filter)
    
    if not exist(path) :
        path =  os.path.join(Nt2_tb_props.get_nt2_dir(),path)
        if not exist(path) :
            path = os.path.join(Nt2_tb_props.get_nt2_dir(),"modules")         
    l = 0
    nbf = 0
    files = Walk(path, 1, filter, 1)
    for f in files:
        p,n = os.path.split(f)
        if  (not is_excluded(p,exclude)) and is_included(p,include) :
            nbf += 1
            l+=len(read(f))
    print("%s\n contains %d lines of %s code in %d files" % (path,l,msg,nbf))
