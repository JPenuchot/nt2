#! /usr/bin/env python
# -*- coding: iso-8859-15  -*-
##############################################################################
#         Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
#         Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI
#
#          Distributed under the Boost Software License, Version 1.0
#                 See accompanying file LICENSE.txt or copy at
#                     http://www.boost.org/LICENSE_1_0.txt
##############################################################################
__author__    = "Lapreste Jean-thierry (lapreste@univ-bpclermont.fr)"
__version__   = "$Revision: 1.0 $"
__date__      = "$Date: 2010    $"
__copyright__ = """ Copyright 2003 & onward LASMEA UMR 6602 CNRS/Univ. Clermont II
                    Copyright 2009 & onward LRI    UMR 8623 CNRS/Univ Paris Sud XI"""
__license__   = "Boost Software License, Version 1.0"

import sys
import os
import re
import argparse
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"nt2_basics"))
sys.path.insert(0,os.path.join(os.path.dirname(os.path.realpath(__file__)),'../lib',"utils"))
from nt2_tb_props     import Nt2_tb_props
from files_utils      import exist
sys.path.pop(0)
sys.path.pop(0)

if __name__ == "__main__" :
    parser = argparse.ArgumentParser(
        description="returns what files are potentially missing for a functor in a module"
        )
    parser.add_argument("-w", "--what_is_looked_for",
                      dest="wilf",
                      action="store_true",
                      default=False,
                      help="""what are the files we are 
                              looking for
                      """)
    parser.add_argument("-m", "--module_name",
                      dest="tb_name",
                      default = "arithmetic",
                      help="""module name
                              (default to 'arithmetic')
                      """)
    parser.add_argument("-f", "--fct_name",
                      dest="fct_name",
                      default =  'abs',
                      help="""the functor name for which
                      existing related files
                      must be found
                              (default to 'abs')
                      """)
    namespace = parser.parse_args()
    tb_name = namespace.tb_name
    fct_name = namespace.fct_name
    tbi = Nt2_tb_props(tb_name)    
    wilf = namespace.wilf
    if wilf :
        tbi.what_are_we_looking_for(fct_name,verbose=True)
    else :
        tbi.who_is_missing(fct_name,verbose=True)

