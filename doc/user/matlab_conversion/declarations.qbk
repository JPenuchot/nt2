[section Declarations and initializations]
If Matlab has quite no need for variable declarations, it is not the case of C++.
Thus in NT2 every matrix must be declared. This obligation is however quite in
harmony with matlab pre-allocation strategy which is advised to improve performances.

[note using C++, take advantage of the mandatory declaration to properly declare and initialize datas in one step.]


[table:id Minimal declaration of a matrix
    [[NT2]                      [Matlab]]
    [[`M_t a;`]                  [`a=[];`]]
    [[`M_t a = zeros(3,4);`]     [`a=zeros(3,4);`]]
    [[`M_t a(of_size(3,4));`]    []]
]

In both situation (NT2/Matlab),
the first line creates an empty matrix and the second line a 3x4 matrix full of zeros

The third line creates a matrix of size 3x4, just allocated and ready to receive whatever values,
but there is no such thing as an non empty, non initialized Matlab matrix.



[table:id More matrices declarations
    [[NT2]                      [Matlab]]
    [[`M_t a=zeros(4,5);`]            [`a =zeros(4,5);`]]
    [[`M_t b=ones(4,5);`]             [`b =ones(4,5);` ]]
    [[`M_t c=cons(4,5,6,2,8);`]       [`c =[4,5,6,2,8];` ]]
    [[`double tmp[]={4,5,6,2,8};
      M_t c(&tmp[0],&tmp[5]);`]       [`c =[4,5,6,2,8];` ]]
    [[`M_t e(linspace(0.0,1,10));`]   [`e =linspace(0.0,1,10);`]]
]
Details about `ones` and similar generators can be found ???.
Note that `cons` is limited to 256 parameters of the same type[footnote This limitation will be dropped with C++11x]
and create a line vector.

To work around the first limitation, one can use this syntax:
  [c++]
  ``
   double tmp[]={4,5,6,2,8};
   M_t c(&tmp[0],&tmp[5]);
  ``
The second problem arise if you want to create a 2X4 matrix as:
  [c++]
  ``
  [ 1 2 3 4
    5 6 7 8 ]
  ``

You have at least three solutions:

[table:id More matrices declarations
    [[NT2]                      [Matlab]]
    [[`M_t a = trans(reshape(_(1,8),4,2));`]                 [` a = reshape(1:8,4,2)`\'`;`]]
    [[`M_t b = trans(reshape(cons(1,2,3,4,5,6,7,8),4,2));`]  [` b = reshape([1,2,3,4,5,6,7,8],4,2)`\'`;`]]
    [[`M_t c = trans(cons(of_size(4,2),1,2,3,4,5,6,7,8));`]  []]
]


Forgiving to type `trans` (respectively \') with size 2x4 will produce the matrix:
  [c++]
  ``
  [ 1 3 5 7
    2 4 6 8 ]
  ``

as the storage is in major column order.
[endsect]



