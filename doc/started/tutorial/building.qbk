[section Building a __NT2__ application]
Now that we have our sample code written down, let's build it. Two ways are
possible: building manually or using our __CMAKE__ support.

[heading Building manually]

[heading Building with __CMAKE__]
__NT2__ provides in =$NT2_ROOT\cmake= a set of cmake file containing macros and
functions to help finding, configuring and building __NT2__ based applications
and libraries. This is the recommended choice for large project or if you want
to use some advanced __NT2__ features. This section will briefly cover the basic
of __CMAKE__ integration. You can find an extensive documentation about __NT2__
__CMAKE__ support in the proper tool chapter.

[heading A basic __NT2__ __CMAKE__ project]

Here is our __CMAKE__ script.

[teletype]
``
cmake_minimum_required(VERSION 2.8)

set(NT2_DIR /path/to/nt2/cmake)

find_package(NT2 REQUIRED)
include(${NT2_USE_FILE})

add_executable(helloworld helloworld.cpp)
``

Let's go over each of its interesting parts.

[teletype]
``
cmake_minimum_required(VERSION 2.8)
``

__NT2__ __CMAKE__ macros and functions require __CMAKE__ 2.8 or above, so we just
inform __CMAKE__ about that.

[teletype]
``
set(NT2_DIR /path/to/nt2/cmake)
``

[teletype]
``
find_package(NT2 REQUIRED)
``

[teletype]
``
include(${NT2_USE_FILE})
``

[teletype]
``
add_executable(helloworld helloworld.cpp)
``

Finally, we just register our program as a classic __CMAKE__ executable rule.

[heading Building the __NT2__ project]
Once done with the script, go to your build directory and type

[teletype]
``
cmake /path/to/CMakeLists.txt
``

This will generate the proper build system and commands to build our "Hello World"
program. Everything should ends up successful. You may know build the project
by typing:

[teletype]
``
make
``

An output like:

[teletype]
``
Scanning dependencies of target helloworld
[100%] Building CXX object CMakeFiles/helloworld.dir/helloworld.cpp.o
Linking CXX executable helloworld
[100%] Built target helloworld
``

should appear, indicating the project has been built correctly. Finally, a simple

[teletype]
``
./helloworld
``

will produce our much anticipated result:

[teletype]
``
1 1 1 1
1 1 1 1
1 1 1 1
1 1 1 1
``

[endsect]
